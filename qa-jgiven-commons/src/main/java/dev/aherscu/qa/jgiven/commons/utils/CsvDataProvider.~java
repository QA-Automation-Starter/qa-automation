/*
 * Copyright (c)  2021 To-Be-Defined. All rights reserved.
 * Confidential and Proprietary.
 */
package dev.aherscu.qa.jgiven.commons.utils;

import java.io.*;
import java.lang.reflect.*;
import java.nio.charset.*;
import java.util.*;

import org.apache.commons.beanutils.*;
import org.testng.annotations.*;

import com.opencsv.*;

import lombok.*;
import lombok.extern.slf4j.*;

/**
 * Generic CSV data provider.
 * 
 * <p>
 * Adapted from
 * <a href="https://groups.google.com/forum/#!topic/testng-users/2TgeDItrG7U">
 * Comma Separated Values (CSV) Files as DataProviders</a>
 * </p>
 *
 * @author aherscu
 *
 */
@Slf4j
public class CsvDataProvider implements Iterator<Object[]> {

    private final Converter[] parameterConverters;
    private final Class<?>[]  parameterTypes;
    private final CSVReader   reader;
    private String[]          last;

    /**
     * Basic constructor that will provide the data from the given file for the
     * given method
     *
     * @param clazz
     *            the test class
     * @param method
     *            the test method
     */
    public CsvDataProvider(final Class<?> clazz, final Method method) {
        val csvFilePath = csvFilePathFor(clazz, method);

        log.trace("trying to open {}", csvFilePath); //$NON-NLS-1$

        // FIXME must close the input somewhere
        reader = new CSVReader(
            new InputStreamReader(
                Objects.requireNonNull(clazz.getClassLoader()
                    .getResourceAsStream(csvFilePath)),
                StandardCharsets.UTF_8));
        parameterTypes = method.getParameterTypes();
        val len = parameterTypes.length;
        parameterConverters = new Converter[len];
        for (int i = 0; i < len; i++) {
            // TODO enhance to handle user defined data types
            parameterConverters[i] = ConvertUtils.lookup(parameterTypes[i]);
        }
    }

    /**
     * Provides data from associated CSV file.
     *
     * <p>
     * By default, the association is by file name. The CSV file must be named
     * according to the test class name and method name.
     * </p>
     *
     * <p>
     * For example, if the test class name is <code>some.package.SomeTest</code>
     * and contains a method shouldDoSomething, then the its associated CSV file
     * should be at <code>some/package/SomeTest.shouldDoSomething.csv</code>
     * </p>
     *
     * @see #csvFilePathFor(Class, Method)
     * @param method
     *            the method as passed by TestNG
     * @return an Iterator of Object[]
     */
    @DataProvider(parallel = true)
    public static Iterator<Object[]> data(final Method method) {
        return new CsvDataProvider(method.getDeclaringClass(), method);
    }

    @Override
    public boolean hasNext() {
        return getNextLine() != null;
    }

    // public Iterator<Object[]> iterator() {
    // return new TransformIterator<>(reader.iterator(),
    // new Transformer<String[], Object[]>() {
    // @Override
    // @SuppressWarnings("synthetic-access")
    // public Object[] transform(final String[] inputs) {
    // val len = inputs.length;
    // val outputs = new Object[len];
    // for (int i = 0; i < len; i++) {
    // outputs[i] = parameterConverters[i]
    // .convert(parameterTypes[i], inputs[i]);
    // }
    // return outputs;
    // }
    // });
    // }
    //
    @Override
    public Object[] next() {
        String[] next;
        if (last != null) {
            next = last;
        } else {
            next = getNextLine();
        }
        last = null;
        final Object[] args = parseLine(next);
        log.trace("retrieved {}", Arrays.toString(args)); //$NON-NLS-1$
        return args;
    }

    /**
     * Unsupported operation.
     */
    @Override
    public void remove() {
        throw new UnsupportedOperationException();
    }

    /**
     * Default implementation for test CSV file association. Override to supply
     * different behavior.
     *
     * @param clazz
     *            the test class
     * @param method
     *            the test method
     * @return the associated CSV file
     */
    @SuppressWarnings("static-method")
    protected String csvFilePathFor(final Class<?> clazz, final Method method) {
        return clazz.getName().replace('.', '/')
            + "." + method.getName() //$NON-NLS-1$
            + ".csv"; //$NON-NLS-1$
    }

    private String[] getNextLine() {
        if (last == null) {
            try {
                last = reader.readNext();
            } catch (final IOException ioe) {
                throw new RuntimeException(ioe);
            }
        }
        return last;
    }

    private Object[] parseLine(final String[] svals) {
        // TODO implement CSV to custom type deserialization using the
        // fromString method; see AbstractElement.
        // This method might be better than the BeanUtilsConverter annotation.
        // If this will prove correct then delete the BeanUtilsConverter
        // annotation.
        final int len = svals.length;
        final Object[] ovals = new Object[len];
        for (int i = 0; i < len; i++) {
            ovals[i] = parameterConverters[i]
                .convert(parameterTypes[i], svals[i]);
        }
        return ovals;
    }
}
