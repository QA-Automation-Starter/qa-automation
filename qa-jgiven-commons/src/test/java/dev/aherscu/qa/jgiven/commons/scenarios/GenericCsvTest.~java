/*
 * Copyright (c)  2021 To-Be-Defined. All rights reserved.
 * Confidential and Proprietary.
 */
package dev.aherscu.qa.jgiven.commons.scenarios;

import static org.assertj.core.api.Assertions.*;

import org.apache.commons.beanutils.*;
import org.testng.annotations.*;

import dev.aherscu.qa.jgiven.commons.actions.*;
import dev.aherscu.qa.jgiven.commons.fixtures.*;
import dev.aherscu.qa.jgiven.commons.model.*;
import dev.aherscu.qa.jgiven.commons.tags.*;
import dev.aherscu.qa.jgiven.commons.utils.*;
import dev.aherscu.qa.jgiven.commons.verifications.*;
import dev.aherscu.qa.testing.utils.config.*;
import com.tngtech.jgiven.*;
import com.tngtech.jgiven.annotation.*;

import lombok.*;
import lombok.extern.slf4j.*;

/**
 * Contains sample tests based on {@link CsvDataProvider} just to ensure that
 * the reading is done properly.
 * 
 * <p>
 * The CsvDataProvider is not yet capable of reading objects from CSV lines,
 * hence temporarily switched off by default. Use -Dcsvtyperesolvers at JVM
 * startup in order to enable it.
 * </p>
 * 
 * @author aherscu
 *
 */
@Slf4j
@SelfTest
@SuppressWarnings({ "boxing" })
public final class GenericCsvTest extends
    UnitilsScenarioTest<BaseConfiguration, AnyScenarioType, GenericFixtures<AnyScenarioType, ?>, GenericActions<AnyScenarioType, ?>, GenericVerifications<AnyScenarioType, ?>> {
    /**
     * Represents data that should be read from a CSV file.
     *
     * @author aherscu
     *
     */
    @BeanUtilsConverter(Status.Converter.class)
    public enum Status implements Element<Status> {
        /**
         * Represents the different status.
         */
        DIFFERENT("different"), //$NON-NLS-1$
        /**
         * Represents the equal status.
         */
        EQUAL("equal"); //$NON-NLS-1$

        /**
         * Converter for {@link Status}.
         *
         * <p>
         * EXPERIMENTAL
         * </p>
         *
         * @author aherscu
         *
         */
        public static final class Converter implements
            org.apache.commons.beanutils.Converter {
            @Override
            public <T> T convert(final Class<T> type, final Object value) {
                if (Status.class.equals(type))
                    return type.cast(
                        "equal".equals(value) //$NON-NLS-1$
                            ? Status.EQUAL
                            : Status.DIFFERENT);
                throw new ConversionException(type + ":" + value); //$NON-NLS-1$
            }
        }

        final String value;

        Status(final String value) {
            this.value = value;
        }

        @Override
        public Status fromStrings(final String... strings) {
            return "equal".equals(strings[0]) //$NON-NLS-1$
                ? Status.EQUAL
                : Status.DIFFERENT;
        }
    }

    /**
     * Encapsulates data that should be read from a CSV row.
     *
     * @author aherscu
     *
     */
    @Setter
    @BeanUtilsConverter(SomeData.Converter.class)
    public static class SomeData extends AbstractElement<SomeData> {
        /**
         * Converter for {@link SomeData}.
         *
         * <p>
         * EXPERIMENTAL
         * </p>
         *
         * @author aherscu
         *
         */
        public static final class Converter implements
            org.apache.commons.beanutils.Converter {
            @Override
            public <T> T convert(final Class<T> type, final Object value) {
                // ISSUE: OpenCSV is not object aware. It parses the CSV line
                // by CSV separators before calling the converter. Hence the
                // object converter receives one CSV item at a time. In order to
                // implement object deserialization from CSV the parser should
                // be made aware of objects during CSV line parsing.
                if (SomeData.class.equals(type))
                    return type.cast(value);
                throw new ConversionException(type + ":" + value); //$NON-NLS-1$
            }
        }

        private int x, y;

        @Override
        public SomeData fromStrings(final String... strings) {
            x = Integer.parseInt(strings[0]);
            y = Integer.parseInt(strings[1]);
            return this;
        }
    }

    /**
     * Initializes with {@link BaseConfiguration}.
     */
    protected GenericCsvTest() {
        super(BaseConfiguration.class);
    }

    /**
     * Should read a three-column CSV file and check that the third cell is the
     * sum of the first and second cells.
     *
     * <p>
     * TODO enhance the {@link CsvDataProvider} to work with custom data types
     * </p>
     *
     * @param data
     *            first and second cells
     * @param sum
     *            the sum of first and second cells
     */
    @Test(enabled = false, dataProviderClass = CsvDataProvider.class,
        dataProvider = "data")
    @As("should read Java Bean from CSV")
    @SneakyThrows(Exception.class)
    public void shouldReadBeanFromCSV(final SomeData data, final int sum) {
        then().$("x + y is sum", //$NON-NLS-1$
            (StepFunction<GenericVerifications<AnyScenarioType, ?>>) stage -> {
                // proves that the data provider works on multiple
                // threads
                log.trace("{} + {} = {}", //$NON-NLS-1$
                    data.x,
                    data.y,
                    sum);
                assertThat(data.x + data.y).isEqualTo(sum);
            });
    }

    /**
     * Should read a three-column CSV file and check that third cell contains
     * the word equal if the first cell equals the second cell, otherwise it
     * should contain the word different.
     *
     * @param x
     *            the first column number
     * @param y
     *            the second column number
     * @param status
     *            the third column
     */
    @Test(enabled = false, dataProviderClass = CsvDataProvider.class,
        dataProvider = "data")
    @As("should read enums from CSV")
    @SneakyThrows(Exception.class)
    public void shouldReadEnumsFromCSV(
        final int x,
        final int y,
        final Status status) {
        then().$("x == y", //$NON-NLS-1$
            (StepFunction<GenericVerifications<AnyScenarioType, ?>>) stage -> {
                // proves that the data provider works on multiple
                // threads
                log.trace("{} {} {}", //$NON-NLS-1$
                    x,
                    status,
                    y);
                assertThat(x == y
                    ? Status.EQUAL
                    : Status.DIFFERENT)
                        .isEqualTo(status);
            });
    }

    /**
     * Should read a two-column CSV file and check that the second cell contains
     * a number which is twice than the number on first cell.
     *
     * @param x
     *            the first column number
     * @param y
     *            the second column number
     */
    @Test(dataProviderClass = CsvDataProvider.class,
        dataProvider = "data")
    @As("should read primitives from CSV")
    @SneakyThrows(Exception.class)
    public void shouldReadPrimitivesFromCSV(final int x, final int y) {
        then().$("y is twice than x", //$NON-NLS-1$
            (StepFunction<GenericVerifications<AnyScenarioType, ?>>) stage -> {
                // proves that the data provider works on multiple
                // threads
                log.trace("is {} twice than {} ?", //$NON-NLS-1$
                    y,
                    x);
                assertThat(x * 2).isEqualTo(y);
            });
    }
}
