# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: snapshot build and publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  matrix-build:
    name: ${{ matrix.os }} jdk-${{ matrix.java-version }} build w/o tests
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        java-version: [ 17, 11, 8 ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: maven
          settings-path: ${{ github.workspace }}

      - name: unix mvn install
        if: ${{ !contains(matrix.os, 'windows') }}
        run: |
          chmod +x mvnw && ./mvnw install \
            -DskipTests=true \
            -s $GITHUB_WORKSPACE/settings.xml \
            -Pmode-build-fast,mode-build-quiet

      - name: windows mvn install
        if: ${{ contains(matrix.os, 'windows') }}
        shell: cmd
        run: |
          mvnw install ^
            -DskipTests=true ^
            -s %GITHUB_WORKSPACE%\settings.xml ^
            -Pmode-build-fast,mode-build-quiet

  deploy-for-jdk8:
    name: jdk-8 snapshot publish
    # ISSUE ChromeDriver/GeckoDriver fail to initialize on Ubuntu
    # see https://github.com/QA-Automation-Starter/qa-automation/actions/runs/3294884059/jobs/5432863668
    # see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    # and https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md
    runs-on: windows-2022
    environment: development

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
          settings-path: ${{ github.workspace }}
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: OSSRH_USERNAME
          server-password: OSSRH_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE

      # FIXME scm-publish:publish-scm fails with
      # Error:  Failed to execute goal
      # org.apache.maven.plugins:maven-scm-publish-plugin:3.1.0:publish-scm (default-cli)
      # on project qa-automation: Failed to check out from SCM:
      # The git-clone command failed. Cloning into 'scmpublish-checkout'...
      # Error:  Host key verification failed.
      # Error:  fatal: Could not read from remote repository.
      # Error:
      # Error:  Please make sure you have the correct access rights
      # Error:  and the repository exists.

      # TODO make the ssh private available via maven settings.xml
      # as documented on
      # https://maven.apache.org/plugins/maven-scm-publish-plugin/publish-scm-mojo.html#serverId
      # https://github.com/marketplace/actions/generate-settings-xml-for-maven-builds#servers
      # https://maven.apache.org/settings.html#servers
      #      - uses: whelk-io/maven-settings-xml-action@v20
      #        with:
      #          servers: >
      #            [
      #              {
      #                "id": "github",
      #                "username": "git",
      #                "privateKey": "C:\\Users\\runneradmin\\.ssh\\id_rsa"
      #              }
      #            ]
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.6.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: mvn deploy
        shell: cmd
        run: |
          git config --global core.longpaths true
          mvnw deploy site site:stage scm-publish:publish-scm ^
            -s %GITHUB_WORKSPACE%\settings.xml ^
            -Pmode-build-quiet,environment-default,testing-tutorials
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}

  generate-automation-project:
    name: Generates new automation project and builds it
    needs: deploy-for-jdk8
    runs-on: ubuntu-latest

    steps:
      - name: setup maven for sonatype snapshots
        uses: whelk-io/maven-settings-xml-action@v20
        with:
          repositories: >
            [
              {
                "id": "ossrh",
                "url": "https://s01.oss.sonatype.org/content/repositories/snapshots",
                "snapshots": {
                    "enabled": "true",
                    "checksumPolicy": "warn"
                }
              }
            ]

      # FIXME should run with controlled java version
      - name: bootstrap maven
        uses: aahmed-se/setup-maven@v3
        with:
          maven-version: 3.6.1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: setup maven cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: generate testing project
        # IMPORTANT
        run: |
          mvn --batch-mode archetype:generate \
            -DarchetypeGroupId=dev.aherscu.qa \
            -DarchetypeArtifactId=qa-testing-archetype \
            -DarchetypeVersion=0.0.2-SNAPSHOT \
            -DgroupId=com.acme \
            -DartifactId=testing \
            -Dversion=1.0-SNAPSHOT \
            -Dpackage=com.acme.testing

      - name: build testing project
        run: cd testing && chmod +x mvnw && ./mvnw
